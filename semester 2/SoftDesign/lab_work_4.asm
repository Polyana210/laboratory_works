format PE console NX ; директива ассемблера: формат генерируемого файла
    ; PE - выходной файл должен быть в формате Portable Executable
    ; console - для подсистемы console (консольное приложение)
    ; NX - запрет выполнения кода вне секции кода
entry start ; директива ассемблера: имя метки инструкции, с которой начнется выполнение программы

include 'WIN32A.INC' ; директива ассемблера: включение файла
    ; WIN32A.INC содержит базовые определения для написания программ под Windows API с использованием однобайтовых символов

section '.bss' data readable writeable ; директива ассемблера: начало секции
    ; .bss - имя секции, предназначенной для неинициализированных данных
    ; data - секция содержит данные
    ; readable - разрешено чтение содержимого секции
    ; writeable - разрешено изменение содержимого секции

; объявление переменной для хранения дискриптора ввода
hInput dd ? ; директива ассемблера: объявление данных
    ; hInput - имя метки
    ; dd - тип данных: 4 байтовое значение (целое)
    ; ? - началоное значение: неизвестно
; объявление переменной для хранения дискриптора вывода
hOutput dd ? ; директива ассемблера: объявление данных
    ; hOutput - имя метки
    ; dd - тип данных: 4 байтовое значение (целое)
    ; ? - началоное значение: неизвестно
; объявление переменной для хранения количества введенных/выведенных символов
dwNumber dd ? ; директива ассемблера: объявление данных
    ; dwNumber - имя метки
    ; dd - тип данных: 4 байтовое значение (целое)
    ; ? - началоное значение: неизвестно
; объявление переменной для хранения введенного символа
buf db ? ; директива ассемблера: объявление данных
    ; buf - имя метки
    ; db - тип данных: 1 байтовое значение (целое) - код символа
    ; ? - началоное значение: неизвестно

section '.data' data readable writeable ; директива ассемблера: начало секции
    ; .data - имя секции, предназначенной для инициализированных данных
    ; data - секция содержит данные
    ; readable - разрешено чтение содержимого секции
    ; writeable - разрешено изменение содержимого секции

;section '.rdata' data readable ; директива ассемблера: начало секции
    ; .rdata - имя секции, предназначенной для инициализированных неизменяемых данных (констант)
    ; data - секция содержит данные
    ; readable - разрешено чтение содержимого секции

; выводимое сообщение
message db 'Hello, world!',13,10 ; директива ассемблера: объявление данных
    ; message - имя метки
    ; db - тип данных: 1 байтовое значение (целое) - код символа
    ; 'Hello, world!',13,10 - началоное значение:
        ; сначала идут коды символов строки 'Hello, world!'
        ; затем 13 и 10 - коды симовлов возврата корретки и перевода строки (означают переход на новую строку)
; количество байт в выводимом сообщении
sizeof.message = $ - message ; директива ассемблера: определение числовой константы (метки)
    ; sizeof.message - имя константы
    ; $ - message - выражение задающее значение:
        ; $ - текущее значение смещения, по которому ассемблер будет располагать генерируемый код/данные
        ; message - метка, значение которой начальное смещение по которому были размещены соответствующие данные

section '.text' code readable executable ; директива ассемблера: начало секции
    ; .text - имя секции, предназначенной для кода
    ; code - секция содержит код    ; readable - разрешено чтение содержимого секции
    ; executable - разрешено выполнение содержимого секции

start: ; точка входа (см entry)

    ;получить дискриптор ввода
    push STD_INPUT_HANDLE
    call [GetStdHandle]
    mov [hInput], EAX
    
    ; получить дискриптор вывода
    push STD_OUTPUT_HANDLE
    call [GetStdHandle]
    mov [hOutput], EAX
    
    ;вывести сообщение
    push 0              ; зарезервировано, должно быть 0
    push dwNumber       ; где сохранить количество выведенных символов
    push sizeof.message ; количество выводимых символов
    push message        ; смещение (адрес), где располагается выводимое сообщение
    push [hOutput]      ; где взять дискриптор файла (потока), куда надо осуществить вывод
    call [WriteConsole] ; косвенный вызов функции: адрес точки входа хранится в WriteConsole
    
    ; ввести один символ - используется для ожидания
    push 0
    push dwNumber       ; где сохранить количество введенных символов
    push 1              ; количество вводимых символов
    push buf            ; смещение (адрес), куда сохранять вводимые символы
    push [hInput]       ; где взять дискриптор файла (потока), откуда надо осуществить ввод
    call [ReadConsole]  ; косвенный вызов функции: адрес точки входа хранится в ReadConsole

    ; завершение программы
    push 0              ; код завершения программы: 0 - нет ошибок
    call [ExitProcess]  ; косвенный вызов функции: адрес точки входа хранится в ExitProcess

section '.idata' import data readable writeable ; директива ассемблера: начало секции
    ; .idata - имя секции, предназначенной для данных об импорте функций
    ; data - секция содержит данные
    ; readable - разрешено чтение содержимого секции
    ; writeable - разрешено изменение содержимого секции

library kernel32, 'KERNEL32.DLL' ; вызов макрокоманды: добавление библиотеки в секцию импорта
    ; kernel32 - идентификатор для дальнейших ссылок в этой секции на импортированную библиотеку
    ; 'KERNEL32.DLL' - имя файла импортируемой библиотеки

import kernel32,\
    ExitProcess, 'ExitProcess',\    
    GetStdHandle, 'GetStdHandle',\
    WriteConsole, 'WriteConsoleA',\
    ReadConsole, 'ReadConsoleA' ; вызов макрокоманды: добавление таблицы импорта из библиотеки
        ; kernel32 - идентификатор библиотеки, из которой импортируем
        ; ExitProcess - метка, где будет сохранен адрес импортированного
        ; 'ExitProcess' - экспортированное библиотекой имя

section '.reloc' fixups data readable discardable ; директива ассемблера: начало секции
    ; .reloc - имя секции, предназначенной для данных таблицы перемещений
    ; fixups - генерировать в этой секиции данные таблицы перемещений
    ; data - секция содержит данные
    ; readable - разрешено чтение содержимого секции
    ; discardable - если секция не нужна, то она не будет загружаться
